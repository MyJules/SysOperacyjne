Zad 4:
    Żeby wykonać zadanie napisałem dwa skrypty: read.sh, write.sh .
    Skrypt write.sh każde 1.0s wypisuje datę natomiast read.sh zawsze
    czyta z pliku.

    Teraz można w różnych terminałach wywołać te skrypty i zobaczyć jak
    to działą. Widać, że potoki czytające z FIFO robią to wypadkowo,
    czasem jeden z nich przyjmuje wiadomość, a czasem inny.

    Przy zabijaniu procesu pisania, wszystkie prosesy czytania nadal
    działają i czekają na wejście, jest ono wykonywane w nieskończonej
    pętli ale samo polecenie cat zawiesza się i czeka na ywejście
    samodzielne, jeżeli by nie było pętli, to cat samo poczeka na
    wejście i wyłączy się kiedy dostanie coś na wejście.

    Natomiast operacje zapisywania zabija się kiedy wysyła pierwszy
    komunikat i oczywiście nie czeka na jego odebrania.
Zad 5:
    W systemach unixowym jest możliwość zabijania prosesów poleceniem
    kill, jako parametr należy podać PID. Także jest możliwość podać
    typ sygnału, SIGNULL, SIGHUP, SIGQUIT... Komend trap jest
    przyznaczona dla wyłapywania sygnłów wysyłanych
    do procesu. Naprzykład sygnał SIGINT jest wysyłany kied
    w konsoli naciskamy Ctrl-C przy wykonującym się procesie.

    Zwykle przed kończeniem roboty, proces wywołuje pseudo-sygnal
    EXIT, który może być korzystny przy pisaniu skryptów. Ale
    warto zauważyć że przy wywołaniu kill -9 , czyli SIGKILL,
    nie wywołuje się sygnal EXIT.

    Zeby protestować sygnały zmodeyfikujemy już napisany skrypt write.sh .
    Będziemy inkrementować zmienną ctrl_count kiedy dostaniemy
    sygnał SIGINT, i w przypadku kiedy 2 razy dostaniemy ten sam
    sygnał, wywołamy exit i wyjdziemy ze skryptu.
